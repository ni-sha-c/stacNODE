import torch
import numpy as np

MSE = torch.tensor([
    0.16517759548453312,
    0.16474533588213178,
    0.15399859589011688,
    0.15240074646332863,
    0.14431808606390661,
    0.14109775903115124,
    0.13359656938410266,
    0.1261527154583216,
    0.12364551817839459,
    0.11426616539125822,
    0.11410830219766585,
    0.10908219410731848,
    0.10454348963612024,
    0.09711218042202009,
    0.09850280117183081,
    0.09133974292294882,
    0.0849317714581422,
    0.084698178930773,
    0.08292233449924709,
    0.07907553089486752,
    0.07565224714001108,
    0.06858773961223658,
    0.06765267160586264,
    0.0635079532485049,
    0.06114846389112472,
    0.05819884111017202,
    0.0573673833374331,
    0.05468819909725536,
    0.05008037300530236,
    0.04832605102925238,
    0.045472447313108906,
    0.04081243550489259,
    0.03937248570907956,
    0.03759094761242495,
    0.0365721941943438,
    0.029957270344836,
    0.03100380796307555,
    0.02957240458335583,
    0.02701201517589535,
    0.025467414245228682,
    0.022293076831900814,
    0.02003079926729906,
    0.01803449363697155,
    0.017787461734566332,
    0.014445541089241029,
    0.015838828027785787,
    0.012573663969255383,
    0.010770529989078218,
    0.011013275866382573,
    0.008449975885522189,
    0.0073725058859911135,
    0.004627792349943146,
    0.006047362755562846,
    0.0031416327118796343,
    0.0015516400849402343,
    -0.0008180896772817725,
    0.00043384280147923496,
    -0.003232059868832236,
    -0.0025254563250007235,
    -0.003334059100036934,
    -0.005398884206634892,
    -0.006748283936967868,
    -0.00884918627322159,
    -0.008163144898995014
  ])
TRUE = torch.tensor([
    0.3036326138973684,
    0.2733300826793848,
    0.2592359443465944,
    0.22570026832790852,
    0.20499556179220835,
    0.18880038432505256,
    0.1649436408025443,
    0.14959141709405116,
    0.12884149030475053,
    0.11283356577795725,
    0.09922043158179,
    0.07759641734453288,
    0.06458761696171936,
    0.04915883564099415,
    0.03422251854753194,
    0.011719669111132857,
    -0.011375340191971086,
    -0.023728667452897013,
    -0.0474021065041923,
    -0.07632938149039226,
    -0.1022612002394441,
    -0.13543156518007282,
    -0.17428897098721977,
    -0.21637289670210785,
    -0.28174847260359853,
    -0.3260439414717527,
    -0.38094805051438,
    -0.42815737688211736,
    -0.4703224794963279,
    -0.5168341038117721,
    -0.5474016996416947,
    -0.5806003231559245,
    -0.60491164658126,
    -0.6353992149564075,
    -0.6509593671447174,
    -0.6772368479582421,
    -0.6924597573717428,
    -0.7233166752417648,
    -0.7451768456289805,
    -0.7658520081093545,
    -0.7976192117626353,
    -0.8177348262761603,
    -0.8488782980990629,
    -0.8748654350505359,
    -0.9030840164439587,
    -0.9361967262025229,
    -0.9764158470760989,
    -0.9989732388499353,
    -1.0365256874177704,
    -1.1082084399541179,
    -1.173513264816884,
    -1.3058200507969862,
    -1.5995114610603332,
    -1.9036772122364456,
    -2.1866992697966614,
    -2.466576242331909,
    -2.75375510717663,
    -3.0467857963193468,
    -3.350413120435991,
    -3.6648053436144177,
    -3.990156220891593,
    -4.330865063616977,
    -4.677957590997393,
    -5.043577457305862
  ])

JAC = torch.tensor([
    0.2904290290978987,
    0.26216001583225396,
    0.2292920728525614,
    0.19900013458933358,
    0.17009920470710693,
    0.15844473509158247,
    0.13202936525989434,
    0.10711922142424324,
    0.09115907052879069,
    0.07236249655573986,
    0.059091344716406535,
    0.04421791128564247,
    0.030596998026639597,
    0.015657029508600397,
    0.002341878168741476,
    -0.014193197589776193,
    -0.03423185958123121,
    -0.04190361675145519,
    -0.06988389701114604,
    -0.08314106499172828,
    -0.10023125591244159,
    -0.13630114042416797,
    -0.16248836903773725,
    -0.20291889323341378,
    -0.23388476223107182,
    -0.2826496779137104,
    -0.33663287884224946,
    -0.3919834110686636,
    -0.4270374479768561,
    -0.46344016552671835,
    -0.5122097282110059,
    -0.5322912737414545,
    -0.5758564431822772,
    -0.603581688997306,
    -0.6290713383310433,
    -0.6524961062397718,
    -0.675290222550457,
    -0.6987444624889935,
    -0.7227006853955936,
    -0.7396563892596272,
    -0.7627929154650411,
    -0.7847978500967414,
    -0.8083753825201458,
    -0.8363048634730084,
    -0.8682250376887526,
    -0.8892453802545297,
    -0.9292204230556017,
    -0.9735898481066253,
    -1.013139186569325,
    -1.0629815846814556,
    -1.106781363482395,
    -1.20276614564064,
    -1.3634041649667736,
    -1.567514849720193,
    -1.8022720628460451,
    -2.0771650584955976,
    -2.3479722081279095,
    -2.6226226214880723,
    -2.844249645047407,
    -3.1317109473096316,
    -3.342888106866879,
    -3.677917004727177,
    -3.834519265164313,
    -4.13243633610015])

# Compute || LE_{NODE} - LE_{rk4} ||
norm_diff = torch.ones_like(TRUE)
for i in range(TRUE.shape[0]):
    norm_diff[i] = torch.linalg.norm(JAC[i] - TRUE[i])/torch.norm(TRUE[i])*100
    print(norm_diff)

print(norm_diff.shape)

# Find elements greater than 10
mask = norm_diff > 10.
# Count the number of elements greater than 10
count = mask.sum().item()

# Get the indices of elements greater than 10
indices = mask.nonzero(as_tuple=True)[0]

print(f'Number of elements greater than 10: {count}')
print(f'Indices of elements greater than 10: {indices.tolist()}')

# Number of elements greater than 10: 62
# Number of elements greater than 10: 33